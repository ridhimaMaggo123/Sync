const PDFDocument = require('pdfkit');
const { analyzeSymptoms, generateExercisePlan } = require('../utils/ai');

class PDFService {
  static async generateProgressReport({
    userData,
    symptomAnalysis,
    exerciseProgress,
    cyclePrediction,
    motivationalMessage
  }) {
    return new Promise((resolve, reject) => {
      try {
        const doc = new PDFDocument({ size: 'A4', margin: 50 });
        const chunks = [];
        doc.on('data', chunk => chunks.push(chunk));
        doc.on('end', () => resolve(Buffer.concat(chunks)));
        doc.on('error', err => reject({ error: 'PDF Generation failed: ' + err.message }));

        // Cover Page
        doc.fontSize(24)
          .font('Helvetica-Bold')
          .text('Sync Progress Report', { align: 'center' })
          .moveDown()
          .fontSize(16)
          .font('Helvetica')
          .text('Understand, Balance, Thrive', { align: 'center' });
        doc.addPage();

        // Overview Section
        doc.fontSize(18)
          .font('Helvetica-Bold')
          .text('Overview')
          .moveDown()
          .fontSize(12)
          .font('Helvetica')
          .text(`Name: ${userData?.name || '-'}`)
          .text(`Email: ${userData?.email || '-'}`)
          .text(`Report Date: ${new Date().toLocaleDateString()}`);
        doc.moveDown(2);

        // Symptom Analysis Section
        doc.fontSize(18)
          .font('Helvetica-Bold')
          .text('Symptom Analysis')
          .moveDown();
        if (Array.isArray(symptomAnalysis?.symptoms) && symptomAnalysis.symptoms.length > 0) {
          symptomAnalysis.symptoms.forEach(symptom => {
            doc.fontSize(12)
              .font('Helvetica-Bold')
              .text(symptom.name, { continued: true })
              .font('Helvetica')
              .text(`: ${symptom.analysis}`);
          });
        } else {
          doc.fontSize(12).font('Helvetica').text('No symptom analysis available.');
        }
        if (symptomAnalysis?.recommendations) {
          doc.moveDown().font('Helvetica-Bold').text('Recommendations:');
          doc.font('Helvetica').fontSize(12).text(symptomAnalysis.recommendations);
        }
        doc.moveDown(2);

        // Exercise Progress Section
        doc.fontSize(18)
          .font('Helvetica-Bold')
          .text('Exercise Progress')
          .moveDown()
          .fontSize(12)
          .font('Helvetica')
          .text(`Sessions Completed: ${exerciseProgress?.completedSessions ?? '-'}`)
          .text(`Weekly Trend: ${exerciseProgress?.weeklyTrend ?? '-'}`);
        doc.moveDown(2);

        // Cycle Prediction Section
        doc.fontSize(18)
          .font('Helvetica-Bold')
          .text('Cycle Prediction')
          .moveDown()
          .fontSize(12)
          .font('Helvetica')
          .text(`Last Period: ${cyclePrediction?.lastPeriodDate ?? '-'}`)
          .text(`Next Predicted: ${cyclePrediction?.nextPredictedDate ?? '-'}`);
        doc.moveDown(2);

        // Motivational Message Section
        doc.moveDown(2)
          .fontSize(14)
          .font('Helvetica-Oblique')
          .text(motivationalMessage || '', { align: 'center' });

        // Footer
        doc.fontSize(10)
          .font('Helvetica')
          .text('Generated by Sync – Your Hormonal Health Companion', 0, doc.page.height - 50, {
            align: 'center'
          });

        doc.end();
      } catch (error) {
        reject({ error: 'Failed to generate PDF report: ' + error.message });
      }
    });
  }

  static async generateHealthReport(userData) {
    return new Promise(async (resolve, reject) => {
      try {
        const doc = new PDFDocument();
        const chunks = [];

        doc.on('data', chunk => chunks.push(chunk));
        doc.on('end', () => resolve(Buffer.concat(chunks)));
        doc.on('error', (error) => {
          console.error('PDF Generation Error:', error);
          reject(new Error('PDF generation failed'));
        });

        // Get analysis
        const analysis = await analyzeSymptoms(userData);
        const exercisePlan = await generateExercisePlan(userData);

        // Header
        doc.fontSize(20).font('Helvetica-Bold').text('Health Analysis Report', { align: 'center' });
        doc.moveDown();

        // Analysis Section
        doc.fontSize(16).font('Helvetica-Bold').text('Analysis');
        doc.fontSize(12).font('Helvetica').text(analysis.analysis);
        doc.moveDown();

        // Risk Level
        doc.fontSize(14).font('Helvetica-Bold').text(`Risk Level: ${analysis.riskLevel}`);
        doc.moveDown();

        // Remedies
        doc.fontSize(16).font('Helvetica-Bold').text('Recommended Remedies');
        analysis.remedies.forEach(remedy => {
          doc.fontSize(12).font('Helvetica').text(`• ${remedy}`);
        });
        doc.moveDown();

        // Exercise Plan
        doc.fontSize(16).font('Helvetica-Bold').text('Exercise Plan');
        if (Array.isArray(exercisePlan)) {
          exercisePlan.forEach(day => {
            doc.fontSize(12).font('Helvetica-Bold').text(`Day ${day.day}`);
            doc.fontSize(12).font('Helvetica').text(`${day.type} - ${day.description}`);
            doc.moveDown(0.5);
          });
        }

        doc.end();
      } catch (error) {
        console.error('Report Generation Error:', error);
        reject(new Error('Failed to generate health report'));
      }
    });
  }
}

module.exports = PDFService;
